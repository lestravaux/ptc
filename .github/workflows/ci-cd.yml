name: CI/CD Pipeline
on: [push]

jobs:

  # deploy-eks:
  #   name: Deploy EKS cluster
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set up Terraform
  #     uses: hashicorp/setup-terraform@v1
  #     with:
  #       terraform_version: '1.10.5'  # Specify your Terraform version

  #   - name: Set up AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-west-2 

  #   - name: Terraform Init
  #     run: terraform init
  #     working-directory: ./terraform-eks  # Path to your Terraform code

  #   - name: Terraform Plan
  #     run: terraform plan
  #     working-directory: ./terraform-eks

  #   - name: Terraform Apply
  #     run: terraform destroy -auto-approve
  #     working-directory: ./terraform-eks

  #   - name: Get EKS Cluster Name
  #     id: eks_output
  #     run: |
  #       export CLUSTER_NAME=$(terraform output -raw cluster_name)
  #       echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
  #       echo "EKS Cluster Name: $CLUSTER_NAME"

  #   - name: Set up kubectl
  #     uses: azure/setup-kubectl@v4
  #     with:
  #       version: 'v1.21.0'  # Set your desired kubectl version

  #   - name: Configure kubectl for EKS
  #     run: |
  #       aws eks --region us-west-2 update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region us-east-2

  build-test:
    name: Running tests for Python app
    runs-on: ubuntu-latest
    #needs: deploy-eks
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        working-directory: ./app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: ./app
        run: |
          pytest --maxfail=1 --disable-warnings -q

  docker-build:
    name: Build Docker image and push to Docker Hub
    runs-on: ubuntu-latest
    needs: build-test
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          IMAGE_NAME=ptc-image
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

  deploy:
    name: Deploy application to EKS
    runs-on: ubuntu-latest
    needs: docker-build
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: Set IMAGE_TAG
      #   run: |
      #     IMAGE_TAG=$(git rev-parse --short HEAD)
      #     echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.21.0'

      - name: Set up Helm
        uses: azure/setup-helm@v1

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2 
      #Configure kubeconfig here â€“ you can use aws eks update-kubeconfig if deploying to EKS
      - name: Configure kubeconfig
        run: |
          #aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region us-east-2

      - name: Deploy with Helm
        working-directory: ./helm
        run: |
          echo $IMAGE_TAG
          unset IMAGE_TAG
          export IMAGE_TAG=""
          git pull origin main
          IMAGE_TAG=$(git rev-parse --short HEAD)
          IMAGE_NAME=ptc-image
          echo "Deploying ptc-app with image: ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG"
          #cat values.yaml
          helm list
          helm upgrade --install ptc-application ptc-chart --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME --set image.tag=riendutout --force
          helm get values ptc-application 



#if: github.ref == 'refs/heads/main'